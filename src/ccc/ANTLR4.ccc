#if false
   A Congo grammar for ANTLR4 grammars.
   It can parse (and build an AST for)
   all the grammars in the ANTLR4 grammar
   repository: https://github.com/antlr/grammars-v4
   This is free to use, though acknowledgement
   would be nice.
#endif

DEFAULT_LEXICAL_STATE=ANTLR;
SMART_NODE_CREATION=false;
TAB_SIZE=4;
ENSURE_FINAL_EOL;

GrammarSpec :
    GrammarDecl
    (PrequelConstruct)*
    (LexerRuleSpec | ParserRuleSpec)*
    (ModeSpec)*
    <EOF>
;    

GrammarDecl :
    GrammarType
    <IDENTIFIER>
    <SEMICOLON>
;    

GrammarType :
    [<LEXER>|<PARSER>] <GRAMMAR>
;

PrequelConstruct :
    OptionsSpec
    |
    DelegateGrammars
    |
    TokensSpec
    |
    ChannelsSpec
    |
    Action_
;

OptionsSpec:
    <OPTIONS>
    (Option <SEMICOLON>)*
    <RBRACE>
;

Option :
    <IDENTIFIER>
    <ASSIGN>
    OptionValue
;    

OptionValue :
    <IDENTIFIER>
    |
    <STRING_LITERAL>
    |
    ActionBlock
    |
    <INT>
;

DelegateGrammars :
    <IMPORT>
    DelegateGrammar
    (<COMMA> DelegateGrammar)*
    <SEMICOLON>
;    

DelegateGrammar :
   <IDENTIFIER> [<ASSIGN> <IDENTIFIER>]
;   

IdList :
   <IDENTIFIER> (<COMMA> <IDENTIFIER> =>||)* [<COMMA>]
;

TokensSpec :
   <TOKENS> IdList <RBRACE>
;

ChannelsSpec :
   <CHANNELS> [IdList] <RBRACE>
;

ModeSpec :
   <MODE> <IDENTIFIER> <SEMICOLON> (LexerRuleSpec)*
;

ParserRuleSpec :
   [RuleModifiers]
   <IDENTIFIER>
   ENSURE {Character.isUpperCase(getToken(0).charAt(0))}
   [ArgActionBlock]
   [RuleReturns]
   [ThrowsSpec]
   [LocalsSpec]
   (RulePrequel)*
   <COLON>
   RuleBlock
   <SEMICOLON>
   ExceptionGroup
;

LexerRuleSpec :
    [<FRAGMENT>]
    <IDENTIFIER>
    ENSURE {Character.isUpperCase(getToken(0).charAt(0))}
    =>||
    [OptionsSpec]
    <COLON>
    LexerRuleBlock
    <SEMICOLON>
;    

Action_ :
   <AT> [ActionScopeName <DOUBLE_COLON> =>||] <IDENTIFIER> ActionBlock
;

ActionScopeName :
    <IDENTIFIER>|<LEXER>|<PARSER>
;

ActionBlock :
    <LBRACE> {token_source.setActionBlockStart(1+lastConsumedToken.getBeginOffset());}
    LEXICAL_STATE IN_ACTION_BLOCK (<ACTION>)
    <RBRACE>
;

ArgActionBlock :
    <LBRACKET> {token_source.setActionBlockStart(1+lastConsumedToken.getBeginOffset());}
    LEXICAL_STATE IN_ARG_ACTION_BLOCK (<ARG_ACTION>)
    <RBRACKET>
;

ExceptionGroup :
   (ExceptionHandler)* [FinallyClause]
;   

ExceptionHandler :
   <CATCH>
   ArgActionBlock
   ActionBlock
;

FinallyClause :
   <FINALLY> ActionBlock
;

RulePrequel :
   OptionsSpec | RuleAction
;

ThrowsSpec :
    <THROWS>
    <IDENTIFIER>
    (<COMMA> <IDENTIFIER>)*
;

LocalsSpec :
   <LOCALS> ArgActionBlock
;

RuleAction :
   <AT> <IDENTIFIER> ActionBlock
;

RuleReturns :
    <RETURNS> ArgActionBlock
;

RuleModifiers :
    (<PUBLIC>|<PRIVATE>|<PROTECTED>|<FRAGMENT>)+
;

RuleBlock :
    LabeledAlt (<OR>LabeledAlt)*
;

LabeledAlt :
    Alternative [<POUND><IDENTIFIER>]
;

Alternative :
   [ElementOptions] (Element)*
;

AltList :
   Alternative (<OR> Alternative)*
;

LexerRuleBlock :
   LexerAlt (<OR> LexerAlt)*
;

LexerAlt :
   (LexerElement)* [LexerCommands]
; 

LexerElement :
   LabeledLexerElement [EbnfSuffix]
   |
   LexerAtom [EbnfSuffix]
   |
   LexerBlock [EbnfSuffix]
   |
   ActionBlock [<QUESTION>]
;
    
EbnfSuffix :
   <QUESTION> [<QUESTION>]
   | 
   <STAR> [<QUESTION>]
   | 
   <PLUS> [<QUESTION>]
;

LexerBlock :
   <LPAREN> LexerRuleBlock <RPAREN>
;

CharacterRange :
   <STRING_LITERAL> <RANGE> =>|| <STRING_LITERAL>
;   

Terminal :
   <IDENTIFIER> [ElementOptions]
   |
   <STRING_LITERAL> [ElementOptions]
 ;

ElementOptions :
   <LT> ElementOption (<COMMA> ElementOption)* <GT>
;

ElementOption : 
   <IDENTIFIER> [<ASSIGN> (<IDENTIFIER> | <STRING_LITERAL>)]
;

LexerAtom : 
   CharacterRange
   | 
   Terminal
   | 
   NotSet
   |
   LexerCharSet
   | 
   <DOT> [ElementOptions]
;

LexerCharSet :
   <LBRACKET>
   LEXICAL_STATE IN_LEXER_CHAR_SET (<CONTENT>)
   <RBRACKET>
;   

NotSet : 
   <NOT> (SetElement | BlockSet)
;

BlockSet : 
   <LPAREN> SetElement (<OR> SetElement)* <RPAREN>
;

SetElement : 
   <IDENTIFIER> [ElementOptions]
   | 
   CharacterRange
   | 
   <STRING_LITERAL> [ElementOptions]
   |
   LexerCharSet
;

Element : 
   LabeledElement [EbnfSuffix]
   | 
   Atom [EbnfSuffix]
   | 
   Ebnf
   | 
   ActionBlock [<QUESTION>]
;

LabeledElement : 
    <IDENTIFIER> (<ASSIGN> | <PLUS_ASSIGN>) =>|| (Atom | Block)
;

Atom :
   Ruleref
   | 
   Terminal
   | 
   NotSet
   | 
   <DOT> [ElementOptions]
;

Ebnf : 
   Block [EbnfSuffix]
;

Ruleref : 
   <IDENTIFIER> [ArgActionBlock] [ElementOptions]
;

Block : 
   <LPAREN> 
   [[OptionsSpec] (RuleAction)* <COLON>] AltList 
   <RPAREN>
;

LexerCommand :
  (<IDENTIFIER>|<MODE>) [<LPAREN> (<IDENTIFIER>|<INT>) <RPAREN>]
;

LabeledLexerElement :
   <IDENTIFIER> (<ASSIGN> | <PLUS_ASSIGN>) =>|| (LexerAtom | LexerBlock)
;

LexerCommands : 
   <RARROW> LexerCommand (<COMMA> LexerCommand)*
;

SKIP :
  <WHITESPACE : (" "| "\t"| "\n"| "\r"| "\f")+> #Whitespace
;

UNPARSED #Comment :
  < ?BLOCK_COMMENT : "/*" (~[])* "*/" > #BlockComment
  |
  < LINE_COMMENT : "//" (~["\n"])* "\n" > #LineComment
;

// Lexical specification begins here.

INCLUDE JAVA_IDENTIFIER_DEF

TOKEN :
  < IDENTIFIER : <JAVA_IDENTIFIER_START> (<JAVA_IDENTIFIER_PART>)* > #Identifier
;

TOKEN #Operator :
  < ASSIGN : "=" >
  |
  < AT : "@" > 
  |
  < COLON : ":" > #Colon
  |
  < DOUBLE_COLON : "::" > #DColon
  |
  < NOT : "~"> #Tilde
  |
  < OR : "|" > #Pipe
  |
  < POUND : "#"> #Pound
  |
  < PLUS : "+" > #Plus
  |
  < PLUS_ASSIGN : "+=" > #PlusAssign 
  |
  < QUESTION : "?" > #Question
  |
  < RANGE : ".." > #Range
  |
  < RARROW : "->" > #RArrow
  |
  < STAR : "*" > #Star
;

TOKEN #Delimiter :
  < COMMA : "," >
  |
  < DOT : "." > 
  |
  < LBRACE : "{">
  |
  < LBRACKET : "[">
  |
  < LPAREN : "(" >
  |
  < LT : "<" >
  |
  < GT : ">" >
  |
  < RBRACE : "}">
  |
  < RBRACKET : "]">
  |
  < RPAREN : ")" >
  |
  < SEMICOLON : ";" > 
;

TOKEN #Keyword :
  <CATCH : "catch">
  |
  <CHANNELS : "channels" (<WHITESPACE>)? "{"> #Channels
  |
  <FINALLY : "finally">
  |
  <FRAGMENT : "fragment">
  |
  <GRAMMAR : "grammar">
  |
  <IMPORT : "import">
  |
  <LEXER : "lexer">
  |
  <LOCALS : "locals">
  |
  <MODE : "mode">
  |
  <OPTIONS : "options" (<WHITESPACE>)? "{"> #Options
  |
  <PARSER : "parser">
  |
  <PRIVATE : "private">
  |
  <PROTECTED : "protected">
  |
  <PUBLIC : "public">
  |
  <RETURNS : "returns">
  |
  <THROW : "throw">
  |
  <THROWS : "throws">
  |
  <TOKENS : "tokens" (<WHITESPACE>)? "{"> #Tokens
;

TOKEN #Literal :
  < INT: "0" | ["1"-"9"](["0"-"9"])* > #DecimalNumeral
  |  
  < #HEX_DIGIT : ["0"-"9","a"-"f","A"-"F"]>
  |
  < #STRING_ESCAPE:
      '\\'
      (
        ["n","t","b","r","f", "\\","'",'"']
        |
        "u" (<HEX_DIGIT>(<HEX_DIGIT>(<HEX_DIGIT>(<HEX_DIGIT>)?)?)?)?
      )
  >
  |
  < STRING_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
          |
          <STRING_ESCAPE>
      )*
      "'"
  > #StringLiteral

;

// Below we define three lexical states
// for when we are in an action block
// and also a LexerCharSet.

<IN_LEXER_CHAR_SET>
MORE :
   < (~["\\","]","\\"] | ("\\" ~["\n","\r"]))+>
;

<IN_LEXER_CHAR_SET>
TOKEN :
   <CONTENT : "]" > {matchedToken.truncate(1);}
;

<IN_ACTION_BLOCK,IN_ARG_ACTION_BLOCK>
UNPARSED :
   < OPEN_CURLY : "{"> {braceNesting++;}
;

<IN_ACTION_BLOCK>
TOKEN :
   < ACTION : "}"> {
        if (braceNesting >0) {
           braceNesting--;
           matchedToken.setUnparsed(true);
        }
        else {
           matchedToken.setBeginOffset(actionBlockStart);
           matchedToken.truncate(1);
        }
   }
;
<IN_ARG_ACTION_BLOCK>
TOKEN :
   < ARG_ACTION : "]"> {
        if (braceNesting >0) {
           braceNesting--;
           matchedToken.setUnparsed(true);
        }
        else {
           matchedToken.setBeginOffset(actionBlockStart);
           matchedToken.truncate(1);
        }
   }
;

<IN_ACTION_BLOCK, IN_ARG_ACTION_BLOCK>
SKIP :
   <#DQSTRING_LITERAL : '"' (~['"'] | '\\"')* '"'>
   |
   < SLITERAL : <STRING_LITERAL> | <DQSTRING_LITERAL> >
   |
   < ANY : ~[] >
;

INJECT LEXER_CLASS : {
   private int actionBlockStart, braceNesting;

   void setActionBlockStart(int actionBlockStart) {
       this.actionBlockStart = actionBlockStart;
   }
}

INJECT PARSER_CLASS :
   import java.nio.file.FileSystems;
{
   static public void main(String[] args) {
     if (args.length == 0) {
      usage();
      return;
     }
     int successfulParses = 0;
     java.util.List<String> failures = new ArrayList<>();
     for (int i = 0;i<args.length;i++) {
        try {
           Node root = parseFile(args[i]);
           System.out.println("Parsed " + args[i] + " successfully.");
           if (args.length == 1) root.dump();
           successfulParses++;
        } catch (Exception e) {
           System.out.println("Failed on " + args[i]);
           e.printStackTrace();
           failures.add(args[i]);
        }
     }
     System.out.println("Successfully parsed " + successfulParses + " files.");
     System.out.println("Failed on parsed " + (args.length-successfulParses) + " files.");
     for (String filename : failures) {
      System.out.println("Failed on: " + filename);
     }
   }

   static Node parseFile(String name) throws IOException {
     Path path = FileSystems.getDefault().getPath(name);
     PARSER_CLASS parser = new PARSER_CLASS(path);
     parser.GrammarSpec();
     return parser.rootNode();
   }

   static void usage() {
      System.out.println("java Antlr4Parser <FILENAME>");
   }
}
